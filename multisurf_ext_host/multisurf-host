#!/usr/bin/env python

# Adapted from: "A simple native messaging host" by The Chromium Authors.

import struct
import sys
import threading

# Helper function that sends a message to the webapp.
def send_message(message):
   # Write message size.
  sys.stdout.write(str(len(message)))
  # Write the message itself.
  sys.stdout.write(message)
  sys.stdout.flush()

# Loop: reads messages from the webapp.
def read_loop(f):
  while 1:
    # Read the message type (first 4 bytes).
    text_length_bytes = sys.stdin.read(4)

    if len(text_length_bytes) == 0:
      send_message('{"info": "Detected length is 0, terminating read loop."}')  
      return

    # Read the message length (4 bytes).
    text_length = struct.unpack('i', text_length_bytes)[0]

    # Read the text (JSON object) of the message.
    text = sys.stdin.read(text_length)
      
    # Write text to log
    f.write(text + '\n')

def set_badge(is_safe):
  if is_safe:
    send_message('{"badge": "safe"}')
  else:
    send_message('{"badge": "warning"}')
    
def main():
  LOG_FILE_PATH = '/home/marcela/Documents/Uni/MultiSurf/multisurf.log'
  
  send_message('{"info": "Native app is running"}')
  
  # As an example, here we always set the badge to the "safe" state
  set_badge(1)
      
  f = open(LOG_FILE_PATH, 'w')

  send_message('{"info": "Entering read loop."}')
  read_loop(f)
  
  f.close()
  sys.exit(0)

if __name__ == '__main__':
  main()

#!/usr/bin/env python

# Adapted from: "A simple native messaging host" by The Chromium Authors.

import struct
import sys
import threading
import json

import client
import util

# Helper function that sends a message to the webapp.
def send_message(message):
   # Write message size.
  sys.stdout.write(struct.pack('I', len(message)))
  # Write the message itself.
  sys.stdout.write(message)
  sys.stdout.flush()

# Loop: reads messages from the webapp.
def read_loop(f,cl):
  while 1:
    # Read the message type (first 4 bytes).
    text_length_bytes = sys.stdin.read(4)

    if len(text_length_bytes) == 0:
      send_message('{"info": "Detected length is 0, terminating read loop."}')  
      return

    # Read the message length (4 bytes).
    text_length = struct.unpack('i', text_length_bytes)[0]

    # Read the text (JSON object) of the message.
    text = sys.stdin.read(text_length)

    obj = json.JSONDecoder().decode(text)

    msg = obj['content']
    if(obj['msgtype'] == 'content'):
      reqUrl = util.get_raw(msg['url'])
      body = msg['pagecontent']

      if(reqUrl == cl.getCurUrl()):
        #g = open('/home/marcela/Desktop/client.txt', 'w')
        #g.write(body)
        #g.close()

        cl.setMyRespBody(body)

        send_message('{"info": "working on checking the requested site"}')

        result = cl.doComparison()

        if(result == util.SAFE or result == util.IDENTICAL_RESP):
          set_badge(1)
          send_message('{"info": "safe"}')
        else:
          set_badge(0)
          send_message('{"info": "unsafe"}')
      else:
        set_badge(0)

    elif(obj['msgtype'] == 'request'):
      reqUrl = msg['url']
      reqHeaders = msg['requestHeaders']

      if('https://' in reqUrl):
        set_badge(2)
      else:
        cl.parseReqHeaders(reqHeaders)

        send_message('{"info": "sending request to peer(s)"}')

        result = cl.doProtocol(reqUrl)

        if(result == util.COMM_ERR or result == util.DIFF_RESP_ERR):
          send_message('{"info": "some error occurred"}')
          set_badge(0)
        else:
          send_message('{"info": "got response from peer(s)"}')

    elif(obj['msgtype'] == 'status'):
      reqUrl = util.get_raw(msg['url'])
      status_code = int(msg['statusCode'])

      if(reqUrl == cl.getCurUrl()):
        cl.setMyStatusCode(status_code)
      else:
        send_message('{"info": "'+reqUrl+'   '+cl.getCurUrl()+'"}')
        set_badge(0)

    # Write text to log
    f.write(text + '\n')

def set_badge(is_safe):
  if (is_safe == 1):
    send_message('{"badge": "safe"}')
  elif(is_safe == 2):
    send_message('{"badge": "https"}')
  else:
    send_message('{"badge": "warning"}')
    
def main():
  LOG_FILE_PATH = '/home/marcela/Documents/Uni/MultiSurf/multisurf.log'
      
  f = open(LOG_FILE_PATH, 'w')

  send_message('{"info": "Native app is running"}')
  
  # As an example, here we always set the badge to the "safe" state

  cli = client.MultiSurfClient()

  send_message('{"info": "Created client."}')
  
  send_message('{"info": "Entering read loop."}')

  read_loop(f,cli)
  
  f.close()
  sys.exit(0)

if __name__ == '__main__':
  main()

   
